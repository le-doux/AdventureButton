{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"illus",
				"illustrations"
			],
			[
				"rotat",
				"p· rotation_z	Float"
			],
			[
				"ch",
				"p· children	Array<luxe.Entity>"
			],
			[
				"ro",
				"p· rotation_z	Float"
			],
			[
				"pul",
				"pullTab"
			],
			[
				"sc",
				"p· scale	luxe.Vector"
			],
			[
				"curS",
				"curStroke"
			],
			[
				"ad",
				"m· add	 "
			],
			[
				"p",
				"p· pos	phoenix.Vector"
			],
			[
				"m",
				"p· matrix	phoenix.Matrix"
			],
			[
				"lo",
				"p· local	phoenix.Spatial"
			],
			[
				"to",
				"m· toLocalSpace	Array<luxe.Vector>"
			],
			[
				"tr",
				"p· transform	luxe.Transform"
			],
			[
				"div",
				"m· divideScalar	phoenix.Vector"
			],
			[
				"illust",
				"illustrations"
			],
			[
				"hack",
				"hackObj"
			],
			[
				"retur",
				"returnObj"
			],
			[
				"retun",
				"returnObj"
			],
			[
				"_",
				"_onComplete"
			],
			[
				"cur",
				"p· curSize	Float"
			],
			[
				"edi",
				"m· editStart	 "
			],
			[
				"end",
				"endSize"
			],
			[
				"stat",
				"startSize"
			],
			[
				"ba",
				"p· batcher	Null<phoenix.Batcher>"
			],
			[
				"state",
				"stateController"
			],
			[
				"illustra",
				"illustration1"
			],
			[
				"illu",
				"illustrations2"
			],
			[
				"ill",
				"illustrations"
			],
			[
				"swit",
				"switchIllustration"
			],
			[
				"curi",
				"curIllustrationIndex"
			],
			[
				"curil",
				"curIllustrationIndex"
			],
			[
				"animate",
				"animateOutro"
			],
			[
				"ac",
				"actuator"
			],
			[
				"Ge",
				"GenericActuator"
			],
			[
				"G",
				"GenericActuator"
			],
			[
				"animat",
				"m· animateOutro	 "
			],
			[
				"start",
				"startSize"
			],
			[
				"anim",
				"animateDisappear"
			],
			[
				"star",
				"startSize"
			],
			[
				"ani",
				"m· animatePull	 "
			],
			[
				"draw",
				"m· drawImmediate	 "
			],
			[
				"act",
				"actionButtons"
			],
			[
				"next",
				"nextButton"
			],
			[
				"action",
				"ActionButton"
			],
			[
				"ation",
				"actionButtons"
			],
			[
				"he",
				"height"
			],
			[
				"ter",
				"terrainPos"
			],
			[
				"cre",
				"m· createByName	OutroAnimation"
			],
			[
				"crea",
				"m· createByName	Direction"
			],
			[
				"get",
				"m· getName	String"
			],
			[
				"Di",
				"Direction"
			],
			[
				"hei",
				"heightInWorldPixels"
			],
			[
				"wid",
				"widthInWorldPixels"
			],
			[
				"wi",
				"widthInWorldPixels"
			],
			[
				"des",
				"m· destroy	 "
			],
			[
				"scen",
				"scenery"
			],
			[
				"scne",
				"sceneryColor"
			],
			[
				"scene",
				"scenery"
			],
			[
				"b",
				"batcher"
			],
			[
				"g",
				"m· getJson	 "
			],
			[
				"se",
				"m· setFromJson	luxe.Color"
			],
			[
				"buildT",
				"buildTerrainAlongLine"
			],
			[
				"preV",
				"prevCursorPos"
			],
			[
				"pre",
				"prev_world_point"
			],
			[
				"build",
				"m· buildTerrainAlongLine	Terrain"
			],
			[
				"Ter",
				"Terrain"
			],
			[
				"close",
				"m· closestPointToWorldPos	luxe.Vector"
			],
			[
				"clos",
				"m· closestPointToWorldPos	luxe.Vector"
			],
			[
				"Terr",
				"TerrainEditor"
			],
			[
				"clo",
				"m· closestVertex	luxe.Vector"
			],
			[
				"re",
				"m· redraw	 "
			],
			[
				"remo",
				"m· removeStartPoint	Terrain"
			],
			[
				"setF",
				"m· setFromJson	luxe.Vector"
			],
			[
				"cl",
				"m· closestIndexToTerrainPos	Int"
			],
			[
				"scre",
				"screen_point"
			],
			[
				"Fi",
				"p· FileSystem	FileSystem"
			],
			[
				"C",
				"p· Color	Color"
			],
			[
				"terr",
				"terrainWorldPos"
			],
			[
				"Terrain",
				"TerrainSaveData"
			],
			[
				"Terra",
				"TerrainSaveData"
			],
			[
				"cle",
				"clearLevel1SceneryHack"
			],
			[
				"level1",
				"level1Scenery"
			],
			[
				"house",
				"house1EndPos"
			],
			[
				"y",
				"p· y	Float"
			],
			[
				"toT",
				"toTargVL"
			],
			[
				"dialogc",
				"dialogCharLeftPosOffset"
			],
			[
				"mul",
				"m· multiplyScalar	 "
			],
			[
				"Ad",
				"m· add	 "
			],
			[
				"cahar",
				"characterWorldPos"
			],
			[
				"lef",
				"dialogCharLeftPosOffset"
			],
			[
				"level2",
				"level2Stuff"
			],
			[
				"charc",
				"characterWorldPos"
			],
			[
				"d",
				"p· dialogModeDelta	Float"
			],
			[
				"dialog",
				"dialogModeDelta"
			],
			[
				"dia",
				"p· dialogCharRightPosOffset	Unknown<1>"
			],
			[
				"cam",
				"camDir"
			],
			[
				"off",
				"xOffset"
			],
			[
				"ve",
				"p· velocityX	Float"
			],
			[
				"vel",
				"velocityX"
			],
			[
				"prev",
				"prevVelocityX"
			],
			[
				"max",
				"p· velocitySwipeMaxX	Int"
			],
			[
				"slop",
				"slopeMultiplier"
			],
			[
				"slo",
				"slopeMultiplier"
			],
			[
				"is",
				"p· isBouncingBack	Bool"
			],
			[
				"ispl",
				"isPlayerBlockedLeft"
			],
			[
				"camC",
				"camCenterX"
			],
			[
				"speech",
				"speechButton"
			],
			[
				"Te",
				"p· TextAlign	TextAlign"
			],
			[
				"charac",
				"characterWorldPos"
			],
			[
				"char",
				"characterWorldPos"
			],
			[
				"levle2",
				"testCharacterPosInLevel2"
			],
			[
				"lv",
				"level2hack"
			],
			[
				"le",
				"level2"
			],
			[
				"level",
				"level1"
			],
			[
				"yo",
				"p· yOffset	Float"
			],
			[
				"ma",
				"p· maxYOffset	Int"
			],
			[
				"aci",
				"actionButton"
			],
			[
				"l",
				"length"
			],
			[
				"jump",
				"p· jumpVelocity	Float"
			],
			[
				"jum",
				"p· jumpVelocity	Float"
			],
			[
				"yoff",
				"p· maxYOffset	Int"
			],
			[
				"eas",
				"p· easeOut	luxe.tween.easing.IEasing"
			],
			[
				"camae",
				"cameraScroll"
			],
			[
				"scor",
				"scrollInput"
			],
			[
				"player",
				"player"
			],
			[
				"cmaera",
				"cameraScroll"
			],
			[
				"isplay",
				"isPlayerBlockedLeft"
			],
			[
				"iscammov",
				"isCamMovingRight"
			]
		]
	},
	"buffers":
	[
		{
			"file": "project.flow",
			"settings":
			{
				"buffer_size": 316,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Main.hx",
			"settings":
			{
				"buffer_size": 3901,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/ActionButton.hx",
			"settings":
			{
				"buffer_size": 7064,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/adamrossledoux/Code/Haxe/libs/luxe/luxe/tween/actuators/GenericActuator.hx",
			"settings":
			{
				"buffer_size": 12523,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"Clean"
			]
		],
		[
			[
				[
					"Packages/sublime_flow/flow.sublime-build",
					""
				],
				[
					"Packages/User/xcode.sublime-build",
					""
				]
			],
			[
				"Packages/sublime_flow/flow.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 167.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package control ins",
				"Package Control: Install Package"
			],
			[
				"color",
				"Colorsublime: Browse Themes"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"colrosu",
				"Colorsublime: Install Theme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add repos",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"package contorl: up",
				"Package Control: Upgrade Package"
			],
			[
				"pacakge control",
				"Package Control: List Packages"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"package cont",
				"Package Control: Add Repository"
			],
			[
				"package control u",
				"Package Control: Upgrade Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"add",
				"Package Control: Add Repository"
			],
			[
				"add repo",
				"Package Control: Add Repository"
			],
			[
				"package control: ",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/adamrossledoux/Code/Haxe/AdventureButton/assets/button3.json",
		"/Users/adamrossledoux/Code/Haxe/AdventureButton/assets/button2.json",
		"/Users/adamrossledoux/Code/Haxe/AdventureButton/assets/button1.json",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/assets/actiontest3.json",
		"/Users/adamrossledoux/Code/Haxe/AdventureButton/src/ActionButton.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/src/Terrain.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/assets/leveltest1",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/assets/leveltest3",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/assets/leveltest2",
		"/Users/adamrossledoux/Code/Haxe/libs/pincushion/pincushion/Pincushion.hx",
		"/Users/adamrossledoux/Code/Haxe/libs/pincushion/pincushion/Pin.hx",
		"/Users/adamrossledoux/Code/Haxe/ScrollProto/src/Level.hx",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/assets/terrain_test2.json",
		"/Users/adamrossledoux/Code/Haxe/AdventurEd/assets/terrain_test.json",
		"/Users/adamrossledoux/Code/Haxe/libs/pincushion/pincushion/Polyfill.hx",
		"/Users/adamrossledoux/Library/Application Support/Sublime Text 3/Packages/User/node.sublime-build",
		"/Users/adamrossledoux/Code/Web/TPChess/BoardRendererSVG/board.html",
		"/Users/adamrossledoux/Code/Web/TPChess/BoardRendererGIF/main.js",
		"/Users/adamrossledoux/Code/Haxe/ScrollProto/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/ScrollProto/project.flow",
		"/Users/adamrossledoux/Code/Haxe/StarGazing/src/Main.hx",
		"/Users/adamrossledoux/Code/C++/Boat/src/Boat.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/Boat.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/Sailor.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/Lighthouse.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/res/Info.plist",
		"/Applications/Boycott Advance.app/Contents/Info.plist",
		"/Users/adamrossledoux/Code/C++/Boat/src/makefile",
		"/Users/adamrossledoux/Code/C++/Boat/src/utils.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/main.cpp",
		"/usr/local/Cellar/glew/1.11.0/lib/libGLEW.a",
		"/Users/adamrossledoux/Code/C++/Boat/src/Flag.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/Lightbeam.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/RainParticles.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/SplashParticles.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/SmokeParticles.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/ParticleSystem.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/Sailor.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/globals.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/SplashParticles.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/packageshaders.py",
		"/Users/adamrossledoux/Code/C++/Boat/src/utils.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/ParticleSystem.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/SmokeParticles.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/smoke_vert.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/smoke_frag.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/splash_frag.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/boat_vert.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/boat_frag.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/sailor_frag.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/sailor_vert.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/rain_frag.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/rain_vert.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/flag_vert.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/flag_frag.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/RainParticles.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/Camera.cpp",
		"/Users/adamrossledoux/Code/C++/Boat/src/Lighthouse.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/lighthouse_frag.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/lighthouse_vert.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/lightbeam_frag.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/lightbeam_vert.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/Lightbeam.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/Flag.h",
		"/Users/adamrossledoux/Code/C++/Boat/src/ocean_frag.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/ocean_vert.glsl",
		"/Users/adamrossledoux/Code/C++/Boat/src/Camera.h",
		"/Users/adamrossledoux/Code/C++/FishOO/src/Fish.cpp",
		"/Users/adamrossledoux/Code/C++/FishOO/src/Fish.h",
		"/Users/adamrossledoux/Code/C++/FishOO/src/vertex_shader.vert",
		"/Users/adamrossledoux/Code/C++/Boat/src/boag_vert.glsl",
		"/Users/adamrossledoux/Code/C++/BoatHope/src/ocean_vert.glsl",
		"/Users/adamrossledoux/Code/C++/BoatHope/src/Camera.cpp",
		"/Users/adamrossledoux/Code/C++/BoatHope/src/utils.cpp",
		"/Users/adamrossledoux/Code/C++/BoatHope/src/utils.h",
		"/Users/adamrossledoux/Code/C++/BoatHope/src/main.cpp",
		"/Users/adamrossledoux/Code/C++/BoatHope/src/makefile",
		"/Users/adamrossledoux/Code/C++/BoatHope/src/ocean_frag.glsl",
		"/Users/adamrossledoux/Code/C++/BoatHope/src/vertex_shader.vert",
		"/Users/adamrossledoux/Code/C++/BoatHope/src/fragment_shader.frag",
		"/Users/adamrossledoux/Code/C++/FishOO/src/fragment_shader.glsl",
		"/Users/adamrossledoux/Code/C++/FishOO/src/vertex_shader.glsl",
		"/Users/adamrossledoux/Code/C++/FishOO/makefile",
		"/Users/adamrossledoux/Code/C++/FishOO/src/TestClass.h",
		"/Users/adamrossledoux/Code/C++/FishOO/src/TestClass.cpp",
		"/Users/adamrossledoux/Code/C++/FishOO/src/makefile",
		"/Users/adamrossledoux/.Archive/Code/C++/FirstClass/FirstClass.cpp",
		"/Users/adamrossledoux/.Archive/Code/C++/FirstClass/main.cpp",
		"/Users/adamrossledoux/.Archive/Code/C++/FirstClass/FirstClass.h",
		"/Users/adamrossledoux/Code/C++/FishOO/TestClass.cpp",
		"/Users/adamrossledoux/Code/C++/FishOO/TestClass.h",
		"/Users/adamrossledoux/Code/C++/FishOO/main.cpp",
		"/Users/adamrossledoux/Code/C++/FishShader/makefile",
		"/Users/adamrossledoux/Code/C++/FishShader/main.cpp",
		"/Users/adamrossledoux/Code/C++/opengl tutorials/2 - drawing/main.cpp",
		"/Users/adamrossledoux/Code/Haxe/StarSlam/src/Main.hx",
		"/Users/adamrossledoux/Code/C++/opengl tutorials/3 - transformations/main.cpp",
		"/Users/adamrossledoux/Code/C++/opengl tutorials/3 - transformations/makefile",
		"/Users/adamrossledoux/Code/C++/opengl tutorials/2 - drawing/makefile",
		"/Users/adamrossledoux/Code/C++/opengl tutorials/1 - context/makefile",
		"/Users/adamrossledoux/Code/C++/opengl tutorials/1 - context/main.cpp",
		"/Users/adamrossledoux/Code/C++/sdl2 tutorials/foo51_modern_opengl/main.cpp",
		"/Users/adamrossledoux/Code/C++/sdl2 tutorials/foo51_modern_opengl/makefile",
		"/Users/adamrossledoux/Code/C++/sdl2 tutorials/foo3_events/makefile",
		"/Users/adamrossledoux/Code/C++/sdl2 tutorials/foo3_events/main.cpp",
		"/Users/adamrossledoux/Code/C++/sdl2 tutorials/foo3_events/03_event_driven_programming.cpp",
		"/Users/adamrossledoux/Code/C++/sdl2 tutorials/0/main.cpp",
		"/Users/adamrossledoux/Code/C++/sdl2 tutorials/0/makefile",
		"/Users/adamrossledoux/Code/C++/sdl2 tutorials/0/make",
		"/Users/adamrossledoux/Code/C++/openframeworks/examples/3d/3DPrimitivesExample/3DPrimitivesExample.sublime-project",
		"/Users/adamrossledoux/Library/Application Support/Sublime Text 3/Packages/User/xcode.sublime-build",
		"/Users/adamrossledoux/Code/openframeworks/INSTALL.md",
		"/Users/adamrossledoux/Code/Haxe/StarSlam/src/VectorExtender.hx",
		"/Users/adamrossledoux/Code/Haxe/StarSlam/src/Player.hx",
		"/Users/adamrossledoux/Code/Haxe/StarSlam/src/Planet.hx",
		"/Users/adamrossledoux/Code/Haxe/StarSlam/project.flow",
		"/Users/adamrossledoux/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/adamrossledoux/Library/Application Support/Sublime Text 3/Packages/Colorsublime/Colorsublime.sublime-settings",
		"/Users/adamrossledoux/.Archive/Code/Haxe/MobiusRunner/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/libs/pincushion/pincushion/utilities/VectorExtender.hx",
		"/Users/adamrossledoux/Code/Haxe/PinEmpty/project.flow",
		"/Users/adamrossledoux/Code/Haxe/StickballTest/src/Main.hx",
		"/Users/adamrossledoux/Code/Haxe/StickballTest/project.flow",
		"/Users/adamrossledoux/Code/Haxe/libs/pincushion/pincushion/PlayState.hx",
		"/Users/adamrossledoux/Code/Haxe/libs/pincushion/pincushion/Polystroke.hx",
		"/Users/adamrossledoux/Code/Haxe/libs/pincushion/pincushion/ComponentState.hx",
		"/Users/adamrossledoux/Code/Haxe/StarGazing/src/components/TrailRenderer.hx",
		"/Users/adamrossledoux/Code/Haxe/StarGazing/src/components/StarGazerTitle.hx"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<current file>,<open files>",
			"<current file>",
			"<current file>,<open files>",
			"<current file>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"isEditing",
			"editFrame",
			"curSize = startSize",
			"curSize = ",
			"curIllustration",
			"complete (",
			"IGenericActuator {",
			"complete",
			"properties",
			"_onComplete",
			"endSizeMult",
			"curbutton",
			"trace",
			"setFromJson",
			"getJson",
			"draw(",
			"sizemode",
			"zoom",
			"stringify",
			"e.mod ",
			"actionbutton.pos = ",
			"draw door",
			"minYOffset",
			"testCharacterPosInLevel2",
			"reset the camera",
			"actionButton",
			"player.terrainPos",
			"jump",
			"levelboundleft",
			"maxVelocity",
			"isCamTooFarRight",
			"isCamTooFarLeft",
			"scrollVelocityOnRelease",
			"lastScrollDelta",
			"scrollVelocitySamples",
			"player",
			".glsl",
			"f.",
			"f",
			"smoke.",
			"sailor s",
			"isstunned = ",
			"isthebigone",
			"isstunned",
			"testsailors",
			"testsailor",
			"lightningTimer",
			"storminess",
			"rand(",
			"rp.",
			"rainparticles",
			"rainparti",
			"rp ",
			"particlesystem::",
			"totalTime",
			"dramaupdate",
			"unilightning",
			"startnewwave",
			"toboat",
			"boat.",
			"boat",
			"boat = ",
			"transform",
			"rand()",
			"uniStormine",
			"uniwave",
			"30f",
			"dissapear",
			"rand()",
			"cout",
			"[]",
			"constructshaderprogram",
			"glew",
			"tmpCurLen",
			"save(",
			"pinBatcher",
			"poseChanges",
			"new Pin",
			"allChildPins",
			"AnimationLerp",
			"PoseLerp",
			"name",
			"PinAnimation",
			"PinFrame",
			"PinData",
			"parent",
			"destroypanel",
			"vSlider",
			"e.pos",
			"pin = ",
			"isDragging",
			"data = ",
			"mode == 0",
			"setstartpose",
			"cast",
			"generateFrameFrom",
			"trace",
			"childPins",
			"removebones",
			"addbones",
			"\"Rigging\"",
			"boneList",
			"boneListMap",
			"update",
			"componentmanager.",
			"mapMeshToboneList",
			"Animation",
			"multiselectbones",
			"boneArray = ",
			"skeleton",
			"boneBatcher",
			"add_batch",
			"batcher",
			"boneBatcher",
			"selectBone",
			"drawer",
			"shapedraw",
			"bonebatcher",
			"activatelayer",
			"activate",
			"layerstack",
			"component",
			"playModeui",
			"scale",
			"groupHandle",
			"editstate",
			"editstate(",
			"editgroup("
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"endSize",
			"fromJson",
			"toJson",
			"level2Stuff.testCharacterPos",
			"speechButton",
			"pos",
			"player.terrainPos",
			"isCamTooFarRightAndMovingRight",
			"isCamTooFarLeftAndMovingLeft",
			"releaseVelocity",
			"touchDelta",
			"velocitySamples",
			"h.",
			"h",
			"totalPlayTime",
			"void dramaUpdate(float dt) {\n	dramaTimer += dt;\n	totalPlayTime += dt;\n	//std::cout << dramaTimer << std::endl;\n\n	float startOfStormTime = (dramaticArc[0].time + dramaticArc[1].time + dramaticArc[2].time);\n	float hardModeTime = (dramaticArc[0].time + dramaticArc[1].time + dramaticArc[2].time + \n							dramaticArc[3].time);\n	float impossibleModeTime = (dramaticArc[0].time + dramaticArc[1].time + dramaticArc[2].time + \n							dramaticArc[3].time + dramaticArc[4].time);\n	float fakeCalmTime = (dramaticArc[0].time + dramaticArc[1].time + dramaticArc[2].time + \n							dramaticArc[3].time + dramaticArc[4].time + dramaticArc[5].time);\n	float endOfStormTime = (dramaticArc[0].time + dramaticArc[1].time + dramaticArc[2].time + \n							dramaticArc[3].time + dramaticArc[4].time + dramaticArc[5].time + \n							dramaticArc[6].time);\n\n	//std::cout << dramaTimer << std::endl;\n\n	//if (dramaTimer > dramaticArc[dramaIndex].time && dramaIndex < 5) {\n	if (dramaTimer > dramaticArc[dramaIndex].time && dramaIndex < 6) {\n		//std::cout << \"next difficulty!!!\" << std::endl;\n		dramaIndex++;\n		curDifficulty = dramaticArc[dramaIndex].difficulty;\n		dramaTimer = 0;\n\n		//make the current wave dissapear\n		didWaveHitPlayer = true;\n		waveDissapearTimer = 0;\n		waveStartHeight = wavePos.y;\n	}\n\n	//send the flag flying away\n	if (totalTime > (endOfStormTime - 10) && flag.isAttachedToBoat) {\n		flag.setRotYGoal( 270 );\n		flag.isAttachedToBoat = false;\n	}\n\n	if (!isTheBigOne && totalTime > (endOfStormTime - 5)) {\n		//std::cout << \"HERE IT COMES \" << std::endl;\n		startBigWave();\n	}\n	\n	//lighthouse events\n	if (totalTime > 2 && lighthouseMoveCounter < 1) {\n		lighthouse.moveTo(glm::vec3(6, -3.7, 10), startOfStormTime - 2);\n		lighthouseMoveCounter++;\n	}\n	else if (totalTime > (endOfStormTime + 30 + 3) && lighthouseMoveCounter < 2) {\n		//lighthouse.moveTo(glm::vec3(1.8, -0.4, 2.7), 15);\n		lighthouse.moveTo(glm::vec3(2, -0.4, 2.7), 15);\n		lighthouseMoveCounter++;\n	}\n	\n\n	//storminess\n	if (totalTime < startOfStormTime - 5) {\n		storminess = 0;\n	}\n	else if (totalTime < startOfStormTime) {\n		storminess = (totalTime - (startOfStormTime - 5)) / 5;\n	}\n	else if (totalTime < (endOfStormTime + 15)) {\n		storminess = 1;\n	}\n	else if (totalTime < endOfStormTime + 20) {\n		storminess = (5 - (totalTime - (endOfStormTime + 15))) / 5;\n	}\n	else {\n		storminess = 0;\n	}\n\n\n	//lightning\n	lightningTimer += dt;\n	//if (totalTime > (startOfStormTime - 2.51) && totalTime < startOfStormTime) { //start of storm\n	if (totalTime > startOfStormTime && totalTime < (startOfStormTime + 1)) {\n		if (lightningStrikeCounter < 1) {\n			lightningTimer = 0;\n			lightningStrikeCounter++;\n		}\n	}\n	else if (totalTime > hardModeTime && totalTime < (hardModeTime + 5)) { //start of second wave\n		if (lightningStrikeCounter < 2) {\n			lightningTimer = 0;\n			lightningStrikeCounter++;\n		}\n	}\n	//else if (totalTime > impossibleModeTime && totalTime < (impossibleModeTime + 5)) { //start of third wave\n	else if (totalTime > (impossibleModeTime - 1) && totalTime < impossibleModeTime) { //start of third wave\n		if (lightningStrikeCounter < 3) {\n			lightningTimer = 0;\n			lightningStrikeCounter++;\n			//timeBetweenLightning = (2 + (rand() % 5)) * 1.0f;\n		}\n	}\n	else if (totalTime > impossibleModeTime && totalTime < (fakeCalmTime - 5)) { //third wave\n		doesLightningStrikeOnWaveCollision = true;\n		lightningTimer += dt; //double the speed of lightning in this period\n\n		/*\n		timeBetweenLightning -= dt;\n\n		if (timeBetweenLightning <= 0) {\n			lightningTimer = 0;\n			timeBetweenLightning = (3 + (rand() % 4)) * 1.0f;\n			//NOTE: this works ok. other possible ideas: \n			//lightning every time the boat gets hit, \n			//lightning every time a wave starts\n		}\n		*/\n	}\n	else if (totalTime > fakeCalmTime && totalTime < (fakeCalmTime + 5)) { //end of third wave\n		doesLightningStrikeOnWaveCollision = false;\n		if (lightningStrikeCounter < 4) {\n			lightningTimer = 0;\n			lightningStrikeCounter++;\n		}\n	}\n	//else if (totalTime > (endOfStormTime + 20 - 2.51) && totalTime < (endOfStormTime + 25)) { //end of storm\n	else if (totalTime > (endOfStormTime + 20 - 5) && totalTime < (endOfStormTime + 25)) { //end of storm\n		if (lightningStrikeCounter < 5) {\n			lightningTimer = 0;\n			lightningStrikeCounter++;\n		}\n	}	\n}\n",
			"totalPlayTime",
			"animationLerp",
			"poseLerp",
			"Animation",
			"Frame",
			"Pose",
			"isPinDraggable",
			"bones",
			"mapping",
			"mapMeshToBones",
			"boneList",
			"utilities",
			"enterGroupHandle",
			"groupHandle",
			"isGroupingLayers",
			"getRectBounds",
			"closestVertex(",
			"addSelectedLayerToComponentManagerInput",
			"addComponentToEntity",
			"addEntity",
			"jsonRepresentation",
			"polylineSplit",
			"polylineIntersections",
			"findIntersections",
			"",
			"PolygonDrawState",
			"EditorState",
			"switchLayerSelection",
			"curColor"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "project.flow",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 316,
						"regions":
						{
						},
						"selection":
						[
							[
								314,
								314
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_flow/flow-file.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Main.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3901,
						"regions":
						{
						},
						"selection":
						[
							[
								3328,
								3328
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 116.0,
						"translation.y": 2008.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "src/ActionButton.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7064,
						"regions":
						{
						},
						"selection":
						[
							[
								3941,
								3950
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 69.0,
						"translation.y": 2513.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/adamrossledoux/Code/Haxe/libs/luxe/luxe/tween/actuators/GenericActuator.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12523,
						"regions":
						{
						},
						"selection":
						[
							[
								2728,
								2738
							]
						],
						"settings":
						{
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 578.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.63486328125,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 282.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/sublime_flow/flow.sublime-build",
	"project": "adventurebutton.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 87.0,
		"last_filter": "show",
		"selected_items":
		[
			[
				"show",
				"showStart"
			],
			[
				"up",
				"update"
			],
			[
				"shows",
				"showStart"
			],
			[
				"start",
				"showStart"
			],
			[
				"keydo",
				"onkeydown"
			],
			[
				"on",
				"onkeydown"
			],
			[
				"on ",
				"onmousedown"
			],
			[
				"sav",
				"save"
			],
			[
				"resi",
				"onwindowresized"
			],
			[
				"open",
				"open"
			],
			[
				"onkey",
				"onkeydown"
			],
			[
				"goto",
				"goToLevel"
			],
			[
				"level2",
				"level2hack"
			],
			[
				"got",
				"goToLevel"
			],
			[
				"read",
				"ready"
			],
			[
				"dram",
				"dramaUpdate"
			],
			[
				"randompo",
				"randomPositionInDropZone"
			],
			[
				"rand",
				"randomWaveStartingPosition"
			],
			[
				"upda",
				"update"
			],
			[
				"wave",
				"waveUpdate"
			],
			[
				"upd",
				"update"
			],
			[
				"ready",
				"ready"
			],
			[
				"ancho",
				"flagAnchorPoint"
			],
			[
				"ra",
				"randomWaveStartingPosition"
			],
			[
				"neww",
				"startNewWave"
			],
			[
				"update",
				"update"
			],
			[
				"re",
				"ready"
			],
			[
				"anch",
				"smokeAnchorPoint"
			],
			[
				"anc",
				"flagAnchorPoint"
			],
			[
				"startnew",
				"startNewWave"
			],
			[
				"dramau",
				"dramaUpdate"
			],
			[
				"drama",
				"dramaUpdate"
			],
			[
				"onk",
				"OnKeyDown"
			],
			[
				"rainpar",
				"RainParticles"
			],
			[
				"onke",
				"OnKeyDown"
			],
			[
				"startw",
				"startNewWave"
			],
			[
				"randomwa",
				"randomWaveStartingPosition"
			],
			[
				"sart",
				"startNewWave"
			],
			[
				"spin",
				"stunSpin"
			],
			[
				"an",
				"flagAnchorPoint"
			],
			[
				"u",
				"update"
			],
			[
				"quit",
				"on_quit"
			],
			[
				"ocean",
				"generateOceanMesh"
			],
			[
				"waveco",
				"testWaveCollision"
			],
			[
				"dramu",
				"DramaUnit"
			],
			[
				"waveu",
				"waveUpdate"
			],
			[
				"updat",
				"waveUpdate"
			],
			[
				"darmaupd",
				"dramaUpdate"
			],
			[
				"dramaup",
				"dramaUpdate"
			],
			[
				"big",
				"testBigWaveCollision"
			],
			[
				"wav",
				"waveUpdate"
			],
			[
				"draw",
				"drawOcean"
			],
			[
				"loop",
				"LoopRunner"
			],
			[
				"loopr",
				"LoopRunner"
			],
			[
				"getwo",
				"getWorldPos"
			],
			[
				"animate",
				"animate"
			],
			[
				"set_an",
				"set_animationDelta"
			],
			[
				"set_a",
				"set_animationDelta"
			],
			[
				"component",
				"startComponents"
			],
			[
				"allChil",
				"allChildPins"
			],
			[
				"set",
				"set_data"
			],
			[
				"regi",
				"registerComponent"
			],
			[
				"get_",
				"get_data"
			],
			[
				"mousemo",
				"onmousemove"
			],
			[
				"se",
				"set_data"
			],
			[
				"resue",
				"resumeStartPose"
			],
			[
				"newa",
				"newAnimation"
			],
			[
				"pose",
				"resumeStartPose"
			],
			[
				"resum",
				"resumeStartPose"
			],
			[
				"onmo",
				"onmousedown"
			],
			[
				"updatef",
				"updateFrame"
			],
			[
				"gener",
				"generateMesh"
			],
			[
				"load",
				"Load"
			],
			[
				"recre",
				"recreateEditorState"
			],
			[
				"json",
				"jsonRepresentation"
			],
			[
				"recreate",
				"recreateEditorState"
			],
			[
				"save",
				"SaveAuto"
			],
			[
				"editorst",
				"getEditorState"
			],
			[
				"wipe",
				"wipeCurrentScene"
			],
			[
				"getbon",
				"getAllBonesInScene"
			],
			[
				"saveau",
				"SaveAuto"
			],
			[
				"childre",
				"getChildrenAsPolys"
			],
			[
				"getp",
				"getPoints"
			],
			[
				"drawre",
				"drawRectBounds"
			],
			[
				"gtp",
				"getPoints"
			],
			[
				"calcul",
				"calculateBounds"
			],
			[
				"getgrou",
				"getGroupParent"
			],
			[
				"getgr",
				"getGroupParent"
			],
			[
				"recen",
				"recenter"
			],
			[
				"endd",
				"endDrawing"
			],
			[
				"getall",
				"getAllBonesInScene"
			],
			[
				"addsele",
				"addSelectedLayerToComponentManagerInput"
			],
			[
				"mosue",
				"onmousedown"
			],
			[
				"skele",
				"skeleton"
			],
			[
				"group",
				"groupLayers"
			],
			[
				"key",
				"onkeydown"
			],
			[
				"onm",
				"onmousedown"
			],
			[
				"enterp",
				"enterPlayMode"
			],
			[
				"enter",
				"enterPlayMode"
			],
			[
				"play",
				"PlayState"
			],
			[
				"animat",
				"AnimationState"
			],
			[
				"anim",
				"AnimationState"
			],
			[
				"drawp",
				"drawPlayPauseText"
			],
			[
				"drawf",
				"drawFileName"
			],
			[
				"drawhel",
				"drawHelpText"
			],
			[
				"act",
				"activateLayerNavigator"
			],
			[
				"drawla",
				"drawLayerNavigator"
			],
			[
				"helpm",
				"setHelpMessage"
			],
			[
				"hel",
				"helpMessage"
			],
			[
				"ung",
				"ungroupLayers"
			],
			[
				"gotolay",
				"goToLayer"
			],
			[
				"keyd",
				"onkeydown"
			],
			[
				"groupla",
				"groupLayers"
			],
			[
				"wip",
				"wipeCurrentScene"
			],
			[
				"groupl",
				"groupLayers"
			],
			[
				"undo",
				"undo"
			],
			[
				"editg",
				"editGroup"
			],
			[
				"exitg",
				"exitCurrentGroup"
			],
			[
				"mreg",
				"mergeGroup"
			],
			[
				"movelay",
				"moveLayerInput"
			],
			[
				"keyu",
				"onkeyup"
			],
			[
				"movela",
				"moveLayerInput"
			],
			[
				"selec",
				"selectLayerInput"
			],
			[
				"movelayerin",
				"moveLayerInput"
			],
			[
				"movel",
				"MoveLayerEdit"
			],
			[
				"activ",
				"activateLayerNavigator"
			],
			[
				"drawg",
				"drawGrid"
			],
			[
				"findlc",
				"findClosestLayer"
			]
		],
		"width": 392.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
